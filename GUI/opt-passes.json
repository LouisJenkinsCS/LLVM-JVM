{
  "constmerge": "Merge Duplicate Global Constants", 
  "tailcallelim": "Tail Call Elimination", 
  "reg2mem": "Demote all values to stack slots", 
  "licm": "Loop Invariant Code Motion", 
  "mergefunc": "Merge Functions", 
  "loop-simplify": "Canonicalize natural loops", 
  "ipconstprop": "Interprocedural constant propagation", 
  "jump-threading": "Jump Threading", 
  "globaldce": "Dead Global Elimination", 
  "constprop": "Simple constant propagation", 
  "strip": "Strip all symbols from a module", 
  "loop-extract-single": "Extract at most one loop into a new function", 
  "strip-dead-debug-info": "Strip debug info for unused symbols", 
  "deadargelim": "Dead Argument Elimination", 
  "indvars": "Canonicalize Induction Variables", 
  "memcpyopt": "MemCpy Optimization", 
  "gvn": "Global Value Numbering", 
  "functionattrs": "Deduce function attributes", 
  "strip-dead-prototypes": "Strip Unused Function Prototypes", 
  "loop-extract": "Extract loops into new functions", 
  "block-placement": "Profile Guided Basic Block Placement", 
  "sroa": "Scalar Replacement of Aggregates", 
  "loop-rotate": "Rotate Loops", 
  "argpromotion": "Promote \u2018by reference\u2019 arguments to scalars", 
  "lowerinvoke": "Lower invokes to calls, for unwindless code generators", 
  "simplifycfg": "Simplify the CFG", 
  "loop-deletion": "Delete dead loops", 
  "dse": "Dead Store Elimination", 
  "strip-debug-declare": "Strip all llvm.dbg.declare intrinsics", 
  "adce": "Aggressive Dead Code Elimination", 
  "globalopt": "Global Variable Optimizer", 
  "dce": "Dead Code Elimination", 
  "lcssa": "Loop-Closed SSA Form Pass", 
  "strip-nondebug": "Strip all symbols, except dbg symbols, from a module", 
  "loop-unswitch": "Unswitch loops", 
  "lowerswitch": "Lower SwitchInsts to branches", 
  "loop-reduce": "Loop Strength Reduction", 
  "sink": "Code sinking", 
  "codegenprepare": "Optimize for code generation", 
  "deadtypeelim": "Dead Type Elimination", 
  "mergereturn": "Unify function exit nodes", 
  "reassociate": "Reassociate expressions", 
  "loop-unroll": "Unroll loops", 
  "ipsccp": "Interprocedural Sparse Conditional Constant Propagation", 
  "prune-eh": "Remove unused exception handling info", 
  "instcombine": "Combine redundant instructions", 
  "die": "Dead Instruction Elimination", 
  "mem2reg": "Promote Memory to Register", 
  "always-inline": "Inliner for always_inline functions", 
  "break-crit-edges": "Break critical edges in CFG", 
  "sccp": "Sparse Conditional Constant Propagation", 
  "partial-inliner": "Partial Inliner", 
  "internalize": "Internalize Global Symbols", 
  "inline": "Function Integration/Inlining", 
  "bb-vectorize": "Basic-Block Vectorization", 
  "loweratomic": "Lower atomic intrinsics to non-atomic form",
  "O3" : "Maximum Optimization sequence",
  "O2" : "",
  "O1" : "",
  "O0" : "",
  "Os" : "",
  "Oz" : "",
  "aa-eval" : "",
  "basicaa" : "",
  "count-aa" : "",
  "da" : "",
  "domfrontier" : "",
  "domtree" : "",
  "globalsmodref-aa" : "",
  "instcount" : "",
  "intervals" : "",
  "iv-users" : "",
  "lazy-value-info" : "",
  "loops" : "",
  "memdep" : "",
  "postdomfrontier" : "",
  "postdomtree" : "",
  "regions" : "",
  "scalar-evolution" : "",
  "scev-aa" : "",
  "targetdata" : ""
}
